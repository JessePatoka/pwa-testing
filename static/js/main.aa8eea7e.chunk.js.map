{"version":3,"sources":["logo.svg","components/Toast.module.css","App.js","serviceWorker.js","components/Toast.js","index.js"],"names":["module","exports","__webpack_require__","p","toast","App","state","event","handlePostMessage","data","incomingEvent","JSON","parse","type","_this","setState","payload","document","addEventListener","this","removeEventListener","react_default","a","createElement","className","src","logo","alt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","postMessage","onSuccess","catch","error","Toast","_ref","children","_ref$handleClick","handleClick","styles","onClick","onTouchEnd","onClickNotification","reload","ReactDOM","render","src_App_0","getElementById","URL","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","notificationDiv","style","display"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCCxCH,EAAAC,QAAA,CAAkBG,MAAA,wOCwCHC,oNApCbC,MAAQ,CACNC,MAAO,MAWTC,kBAAoB,SAAAD,GAAS,IACnBE,EAASF,EAATE,KACFC,EAAgBC,KAAKC,MAAMH,GAEN,SAAvBC,EAAcG,MAChBC,EAAKC,SAAS,CACZR,MAAOG,EAAcM,8FAbzBC,SAASC,iBAAiB,UAAWC,KAAKX,kEAI1CS,SAASG,oBAAoB,UAAWD,KAAKX,oDAe7C,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,iCAAyBJ,KAAKb,MAAMC,gBA9B5BqB,cCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,YAK1BC,QAAQC,IAAI,6CAGRZ,EAAOa,WACTN,EAAiBO,YAAY,eAC7Bd,EAAOa,SAASR,MAMlBM,QAAQC,IAAI,sCAGRZ,EAAOe,WACTf,EAAOe,UAAUV,SAO5BW,MAAM,SAAAC,GACLN,QAAQM,MAAM,4CAA6CA,yBCrFlDC,EAAA,SAAAC,GAAmE,IAAxDC,EAAwDD,EAAxDC,SAAwDC,EAAAF,EAA9CG,mBAA8C,IAAAD,EAAhC,kBAAMV,QAAQC,IAAI,YAAcS,EAChF,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAWoC,IAAOxD,MAAOyD,QAASF,EAAaG,WAAYH,GAC7DF,ICGP,SAASM,IACPhC,OAAOC,SAASgC,SAHlBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASlD,SAASmD,eAAe,SFW1C,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,eAAwBvC,OAAOC,UAC3CuC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOb,iBAAiB,OAAQ,WAC9B,IAAMkB,EAAK,GAAAoC,OAAMF,eAAN,sBAEPzC,GA4DV,SAAiCO,EAAOC,GAEtCoC,MAAMrC,GACHK,KAAK,SAAAiC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxC,UAAUC,cAAcwC,MAAMtC,KAAK,SAAAC,GACjCA,EAAasC,aAAavC,KAAK,WAC7BV,OAAOC,SAASgC,aAKpB7B,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLL,QAAQC,IAAI,mEA/EVgC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMtC,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MEjB/BE,CAAuB,CAAEW,SAhBzB,SAAkBR,GAChB,IAAMwC,EAAkBjE,SAASmD,eAAe,mBAC1CT,EAAcI,EAEpBE,IAASC,OACP7C,EAAAC,EAAAC,cAACgC,EAAD,CAAOI,YAAaA,GAApB,+DAGAuB,GAEFA,EAAgBC,MAAMC,QAAU","file":"static/js/main.aa8eea7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toast\":\"Toast_toast__3w399\"};","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    event: ''\n  };\n\n  componentDidMount() {\n    document.addEventListener('message', this.handlePostMessage);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('message', this.handlePostMessage);\n  }\n\n  handlePostMessage = event => {\n    const { data } = event;\n    const incomingEvent = JSON.parse(data);\n\n    if (incomingEvent.type === 'SCAN') {\n      this.setState({\n        event: incomingEvent.payload\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Button Should Work!</p>\n          <span>Most recent event {this.state.event}</span>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                installingWorker.postMessage('skipWaiting');\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styles from './Toast.module.css';\n\nexport default function({ children, handleClick = () => console.log('nothing') }) {\n  return (\n    <div className={styles.toast} onClick={handleClick} onTouchEnd={handleClick}>\n      {children}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Toast from './components/Toast';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nfunction onClickNotification() {\n  window.location.reload();\n}\n\nfunction onUpdate(registration) {\n  const notificationDiv = document.getElementById('sw-notification');\n  const handleClick = onClickNotification;\n\n  ReactDOM.render(\n    <Toast handleClick={handleClick}>\n      Update to app available, please press here to load changes.\n    </Toast>,\n    notificationDiv\n  );\n  notificationDiv.style.display = 'block';\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({ onUpdate });\n"],"sourceRoot":""}